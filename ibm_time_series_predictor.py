# -*- coding: utf-8 -*-
"""IBM Time Series Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vwR9uQ2NSX5HjURjP-pbtXLLWF70Bibs
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import requests

url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=92O3ETMARJ1Q00DG'
r = requests.get(url)
data = r.json()

print(data)

import json

print(data.keys())

time_series = data["Time Series (Daily)"]
print(time_series.keys())

# Convert to DataFrame
df = pd.DataFrame.from_dict(time_series, orient="index")

# Reset index to make 'date' a column
df.reset_index(inplace=True)
df.rename(columns={
    "index": "date",
    "1. open": "open",
    "2. high": "high",
    "3. low": "low",
    "4. close": "close",
    "5. volume": "volume"
}, inplace=True)

# Convert data types
df["date"] = pd.to_datetime(df["date"])
df[["open", "high", "low", "close"]] = df[["open", "high", "low", "close"]].astype(float)
df["volume"] = df["volume"].astype(int)

print(df)

df.plot(x="date", y="close", title="IBM Stock Closing Prices", ylabel="Close Price")
plt.show()

X = df[['open', 'high', 'low', 'volume']]
y = df['close']

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Training the Multiple Linear Regression model on the Training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score
# Step 4: Make Predictions
# Use the model to predict the 'Close' prices on the test set
y_pred = regressor.predict(X_test)

# Step 5: Evaluate the Model
# Calculate Mean Squared Error (MSE) and R-squared (R2) metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display evaluation results
print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

residuals = y_test - y_pred
plt.scatter(y_test, residuals)
plt.axhline(0, color='red', linestyle='--')
plt.title("Residuals vs Actual Values")
plt.xlabel("Actual Values")
plt.ylabel("Residuals")
plt.show()

