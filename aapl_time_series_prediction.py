# -*- coding: utf-8 -*-
"""AAPL Time Series Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8sHSD0VPiqyY7oOC5r0G2jQ4eu6FKRJ
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import requests

url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&apikey=92O3ETMARJ1Q00DG'
r = requests.get(url)
data = r.json()

print(data)

import json

print(data.keys())

time_series = data["Time Series (Daily)"]
print(time_series.keys())

# Convert to DataFrame
df = pd.DataFrame.from_dict(time_series, orient="index")

# Reset index to make 'date' a column
df.reset_index(inplace=True)
df.rename(columns={
    "index": "date",
    "1. open": "open",
    "2. high": "high",
    "3. low": "low",
    "4. close": "close",
    "5. volume": "volume"
}, inplace=True)

# Convert data types
df["date"] = pd.to_datetime(df["date"])
df[["open", "high", "low", "close"]] = df[["open", "high", "low", "close"]].astype(float)
df["volume"] = df["volume"].astype(int)

print(df)

# Splitting the dataset into the Training set and Test set

X = df[['open', 'high', 'low', 'volume']]
y = df['close']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Part 2 - Now let's make the ANN!

# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

# Initialising the ANN
classifier = Sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu', input_dim = 4))

# Adding the second hidden layer
classifier.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))

#Adding third layer
classifier.add(Dense(units=16, kernel_initializer = 'uniform', activation='relu'))

# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'linear'))

from keras.optimizers import Adam

optimizer = Adam(learning_rate=0.0001)

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics = ['mse'])

# Fitting the ANN to the Training set
classifier.fit(X_train, y_train, batch_size = 10, epochs = 200, validation_split=0.2)